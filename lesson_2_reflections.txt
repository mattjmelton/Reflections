What happens when you initialize a repository? Why do you need to do it?
Git creates a hidden file called .git that will hold the metadata for the repository and its files.  We can then use git commands on the repository to manipulate and operate on the files and their history.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is a separate holding area where changes to files wait to be committed.  The working directory is where the next changes are made but haven't been committed to the repository. The staging area allows you to organize the repository by committing related files.  It also allows you to check that the right changes are being made.

How can you use the staging area to make sure you have one commit per logical change?
Use git diff to check the changes between the working directory and the staging area.  Use git diff --staged to check the changes between the staging area and the most recent commit.  git status will show the number of files ready to be committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When adding an experimental feature or refactoring the code it is helpful to branch from the master.  Branches help by keeping a set of changes isolated from the master branch.  Multiple developers can be working off of the master by using branches.

How do diagrams help you visualize the branch structure?
Diagrams help to understand which commits belong to which parents and if a commit is reachable.  It helps to know where the branch deviated from the master and how big the differences or merge that would be required to be made when bringing the branch back into the master.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
All commits from both branches are combined to form one branch.  Represent the merge by reparenting to the master keeps the master as the main branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
PROS: All changes are combined into a single branch and the tip has all changes in one single command.
CONS: If there are conflicts detected it doesn't automatically merge.  This could be seen as a PRO though.
